@model GoodNewsAggregator.Models.ViewModels.News.NewsListWithRss

@{
    ViewData["Title"] = "News";
}



<h3>Are you sure you want to aggregate news? it can take a time</h3>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Aggregate">
            <input type="submit" value="Submit" class="btn btn-danger" />
        </form>
    </div>
</div>

<h1>Новости</h1>

<div class="accordion col-md-3" id="accordionSourses">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingSourses">
            <button class="accordion-button" type="button" data-bs-toggle="collapse"
                    data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Выбрать источник
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingSourses"
             data-bs-parent="#accordionSourses">
            <div class="accordion-body">
                <div class="row">
                    @foreach (var source in Model.RssSourses)
                    {
                        <div class="form-check form-switch">
                            <label class="form-check-label" for="flexCheckBox">
                                @source.Name
                            </label>
                            <input class="form-check-input" type="checkbox"
                                   id="flexCheckBox" value="@source.Id" 
                                   onchange="OnChangeCheckBoxFunc(this)" />
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>

<p>
    <a asp-action="Create">Create New</a>
</p>
<div id="outputField"></div>

<div class="row">

    @foreach (var item in Model.NewsLists)
    {
        await Html.RenderPartialAsync("ShortNewsPreview", item);
    }

</div>

@section scripts
{

    <script>
    //$('#flexCheckBox').on('click', function () {
    //    if ($(this).is(':checked')) {
    //        console.log('checkbox checked')
    //    } else {
    //        console.log('checkbox unchecked')
    //    }
    //})



    //$('#flexCheckBox').on('click', function () {
    //    if ($(this).is(':checked')) {
    //        console.log('checkbox checked')
    //    } else {
    //        console.log('checkbox unchecked')
    //    }
    //})

    //$('flexCheckBox').on('click', function () {
    //    let checkboxStatus = $(this).prop('checked')
    //    console.log(checkboxStatus)
    //})

    //$('input').on('click', function () {

    //    $('#outputField').html('');

    //    $('input:checked').each(function () {
    //        $('#outputField').append($(this).val() + " ");

    //    });
    //});


    rssIds = [];

function OnChangeCheckBoxFunc(e) {
    var rssId = e.value;

    if (rssIds.indexOf(rssId) > -1)
    {
        var elementIndex = rssIds.indexOf(rssId);
        rssIds.splice(elementIndex, 1);
    }
    else
    {
        rssIds.push(rssId);
    }
    getCheckedCheckBoxesMove();
}

function getCheckedCheckBoxesMove() {

    $.ajax({
        type: 'POST',
        url: '@Url.Action("Index", "News")',
        data: {
            rssIds: rssIds,
        },
        success: function (data) {
            console.log('success!');
        }
    });
}

    </script>
}